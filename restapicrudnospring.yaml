openapi: 3.0.0
info:
  title: REST API CRUD no spring application
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1/
    description: Dev server
paths:
  /users:
    get:
      summary: get list of all users
      tags:
        - Users
      operationId: getAllUsers
      responses:
        '200':
          description: Success on getting list of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        'default':
          description: Cant get list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create user
      tags:
        - Users
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success on creating new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        'default':
          description: Cant create new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{user_id}:
    get:
      summary: get user by id
      tags:
        - Users
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          required: true
          description: Id of User
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Success on getting user by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        'default':
          description: Cant get user by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: delete user by id
      tags:
        - Users
      operationId: deleteUserById
      parameters:
        - name: user_id
          in: path
          required: true
          description: id of user to delete
          schema:
            type: string
            example: 1
      responses:
        'default':
          description: Cant create new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: update an existing user by id
      tags:
        - Users
      operationId: updateUserById
      requestBody:
        description: update an existing user by id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      parameters:
        - name: user_id
          in: path
          required: true
          description: Id of User
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Success on updating user by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        'default':
          description: Cant get user by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events:
    get:
      summary: get list of all events
      tags:
        - Events
      operationId: getAllEvents
      responses:
        '200':
          description: Success on getting list of all events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        'default':
          description: Cant get list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create event
      tags:
        - Events
      operationId: createEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Success on creating new event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        'default':
          description: Cant create new event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events/{event_id}:
    get:
      summary: get event by id
      tags:
        - Events
      operationId: getEventById
      parameters:
        - name: event_id
          in: path
          required: true
          description: Id of event
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Success on getting event by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        'default':
          description: Cant get event by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: delete event by id
      tags:
        - Events
      operationId: deleteEventById
      parameters:
        - name: event_id
          in: path
          required: true
          description: id of event to delete
          schema:
            type: string
            example: 1
      responses:
        'default':
          description: Cant create new event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: update an existing event by id
      tags:
        - Events
      operationId: updateEventById
      requestBody:
        description: update an existing event by id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      parameters:
        - name: event_id
          in: path
          required: true
          description: Id of event
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Success on updating event by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        'default':
          description: Cant get event by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files:
    get:
      summary: get list of all files
      tags:
        - Files
      operationId: getAllFiles
      responses:
        '200':
          description: Success on getting list of all files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Files'
        'default':
          description: Cant get list of files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create file
      tags:
        - Files
      operationId: createFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          description: Success on creating new file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        'default':
          description: Cant create new file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{file_id}:
    get:
      summary: get file by id
      tags:
        - Files
      operationId: getFileById
      parameters:
        - name: file_id
          in: path
          required: true
          description: Id of file
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Success on getting file by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        'default':
          description: Cant get file by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: delete file by id
      tags:
        - Files
      operationId: deleteFileById
      parameters:
        - name: file_id
          in: path
          required: true
          description: id of file to delete
          schema:
            type: string
            example: 1
      responses:
        'default':
          description: Cant create new file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: update an existing file by id
      tags:
        - Files
      operationId: updateFileById
      requestBody:
        description: update an existing file by id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/File'
        required: true
      parameters:
        - name: file_id
          in: path
          required: true
          description: Id of file
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Success on updating file by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        'default':
          description: Cant get file by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: username1
        status:
          type: string
          enum:
            - ACTIVE
            - DELETED
          example: ACTIVE
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    Error:
      type: object
      required:
        - code
        - name
      properties:
        code:
          type: integer
        message:
          type: string
    Event:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: 1
        user_id:
          type: string
          example: 1
        file_id:
          type: string
          example: 1
        status:
          type: string
          enum:
            - ACTIVE
            - DELETED
          example: ACTIVE
    Events:
      type: array
      items:
        $ref: '#/components/schemas/Event'
    File:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: 1
        file_name:
          type: string
          example: testFile1
        file_path:
          type: string
          example: fakepath1
        status:
          type: string
          enum:
            - ACTIVE
            - DELETED
          example: ACTIVE
    Files:
      type: array
      items:
        $ref: '#/components/schemas/File'


